# -*- coding: utf-8 -*-
"""Copy of BYOP'Mid-Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15UpFSvJ7RmpHrV8RE_YTiOJmbbL9fX0P

Loading the libraries
"""

import matplotlib.pyplot as plt # plotting the statistical distribution
import numpy as np # for linear algebra
import os # accessing directory structure
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import gensim
from gensim import corpora #to construct the corpus matrix for LDA model
import re #for regular words
import seaborn as sns #visualising data as graphs

"""# Dataset Loading"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/BYOPVasu Khanna/Restaurant_reviews_dataset.csv')

"""Printing the dataset"""

df

"""# Dataset Visualisation"""

import matplotlib.pyplot as plt 
import seaborn as sns
#For Displaying the first 5 rows of the DataFrame
print(df.head())

#For Displaying the shape of the DataFrame
print(df.shape)

#For Checking the data types of each column
print(df.dtypes)

#For Checking for missing values
print(df.isnull().sum())

#For Generating descriptive statistics for numerical columns
print(df.describe())

# Plotting a histogram of a numerical column
plt.hist(df['Liked'], bins=10)
plt.title('Likes & Dislikes visualisation')
plt.xlabel('Rating')
plt.ylabel('Number of reviews')
plt.show()

# Generating a boxplot of a numerical column
sns.boxplot(x=df['Liked'])
plt.title('Boxplot of Likes')
plt.xlabel('Column')
plt.show()

# Generating a correlation matrix of numerical columns
corr_matrix = df.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Creating a pairplot of numerical columns
sns.pairplot(df)
plt.title('Pairplot')
plt.show()

# Generating a bar chart of categorical columns
df['Liked'].value_counts().plot(kind='bar')
plt.title('Bar Chart of Column')
plt.xlabel('Column')
plt.ylabel('Frequency')
plt.show()

"""Here, I was facing error in accessing the review column of the dataset because of an extra 'space' present with the word ' Review'. So, I figured it out first after facing "Attribute not found error" & then renamed it to "Review"
"""

df.columns

df = df.rename(columns={' Review': 'Review'})

"""### Changed the Data present in the review column into a list"""

data = df.Review.values.tolist()
data

"""Removing the unwanted characters, expressions & symbols & then printing the dataset"""

import re
df['Review'] = df['Review'].str.replace("[^a-zA-Z#]", " ")
df

"""Storing the data now obtained in a new dataframe named 'data'"""

data = df.Review.values.tolist()
data

#nlp.Defaults.stop_words.add('I')
nlp.vocab['I'].is_stop = True

stop_words = set(stopwords.words('english'))

reviews = word_tokenize(reviews_stopwords_removed)
# converts the words in word_tokens to lower case and then checks whether
#they are present in stop_words or not
filtered_reviews = [w for w in reviews if not w.lower() in stop_words]
#with no lower case conversion

for w in reviews:
	if w not in stop_words:
		filtered_reviews.append(w)
	
print(reviews)

import matplotlib.pyplot as plt
from collections import Counter


new_list = [word for word in filtered_reviews if len(word) >3]
print(new_list)

words = new_list
word_counts = Counter(words)
top_words = word_counts.most_common(20)

# Plotting 30 most frequent words from the filtered_reviews set
plt.bar( [w[0] for w in top_words],[w[1] for w in top_words])
plt.xticks(rotation=45, ha='right')
plt.xlabel('Word')
plt.ylabel('Count')
plt.title('20 Most frequently occurinng words')
plt.show()

#Tokenize the sentence into words
tokens = [word for word in reviews_stopwords_removed.split()]
from gensim import corpora
from gensim.models.ldamodel import LdaModel

    #Create dictionary
dictionary = corpora.Dictionary([tokens])
print(dictionary)

# print(dictionary.id2token) ## to see the actual dictionary generated
corpus = [dictionary.doc2bow(reviews_stopwords_removed) for text in reviews] ## document to bag of words

# fit LDA model
transcripts_topics = LdaModel(corpus=corpus,
                           id2word=dictionary,
                           num_topics=30,
                           alpha='auto', ##Learns an asymmetric prior from the corpus;
##1D array of length=number of expected topics that expresses our a-priori belief for the each topicsâ€™ probability.
                           passes=100 ##Number of passes through the corpus during training.
                             ) 
print(transcripts_topics)
# print out first 5 topics
for i, topic in enumerate(transcripts_topics.print_topics(5)):
    print ('%d: %s\n'%(i+1, topic))

# Build the bigram and trigram models
bigram = gensim.models.Phrases(new_list, min_count=5, threshold=100) # higher threshold fewer phrases.
trigram = gensim.models.Phrases(bigram[new_list], threshold=100)  

# See trigram example
print(bigram_mod[new_list])
